#  Initialization

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "PGcourse.pl"
);

TEXT(beginproblem());

$showPartialCorrectAnswers = 1;
$showHint = 1;

##################
#  Setup

Context("Matrix");

$A = Matrix([
[random(-3,6,1),random(-3,7,1),random(-3,5,1)],
[random(-3,6,1),random(-3,1,1),random(-3,5,1)],
[random(-3,6,1),random(-3,2,1),random(-3,4,1)],
]);

$i1=random(1,3,1);
$j1=random(1,3,1);

do
{
    $i2=random(1,3,1);
}
until
    (($i1 != $i2) or ($j1 != $i2));

##################
#  Main text

BEGIN_PGML

V této sadě úloh se budeme věnovat lineární algebře. Základními objekty zájmu jsou mnohorozměrné veličiny a operátory umožňující rozumnou manipulaci s těmito veličinami. Tedy vektory a matice. Nejprve se budeme věnovat maticím a lineární kombinaci vektorů připomeneme až v souvislosti s násobením matic. Závěrečné příklady jsou věnovány využití maticového násobení k výpočtu toku tepla ze zadaného gradientu. Formálně se jedná o maticový součin zasazený do reálné aplikace.

_V této sadě úloh jsou odpovědní políčka většinou komponenty matice nebo vektoru. Odpověď však není vyhodnocována políčko po políčku, ale jako celek tvořící matici nebo vektor. Pokud uděláte chybu třeba jenom v jedné komponentě, budou červeně jako chybné označeny komponenty všechny.._

## Prvky matice

    Prvky matice označujeme pomocí dvojice indexů, kde první index je řádkový a druhý index je sloupcový. Například [`b_{23}`] označuje prvek matice [`B`], který je ve druhém řádku a třetím sloupci. Pro matici [``` B=\begin{pmatrix}1&3&-5\\ 0&-1&7\\0&2&-3\end{pmatrix}```] platí [``` b_{23}=7,```] protože ve druhém řádku a třetím sloupci je sedmička.

*Poznámka:* V tomto i v dalších zadáních je někdy matice ohraničena hranatými závorkami namísto kulatých. Je to pouze formalita daná použitým programem. Nemusíte se tím nechat zmást, běžně se používají oba zápisy.

---------------

    Je dána matice [```A=[$A].```]

    Určete prvky [`` a_{[$i1][$j1]}``] a [`` a_{[$i2][$i2]} ``] matice [`A`]. 

    >>[`` a_{[$i1][$j1]}={}``][_____]*{$A->element($i1,$j1)}<<
    
    >>[`` a_{[$i2][$i2]}={}``][_____]*{$A->element($i2,$i2)}<<
    
END_PGML

BEGIN_PGML_HINT
Pozorně rozšifrujete, který prvek máme nalézt. Tento prvek poté identifikujte v matici. Například prvek [`` a_{[$i1][$j1]}``] je v řádku číslo [$i1] (počítáno od jedničky směrem shora dolů) a sloupci číslo [$j1] (počítáno od jedničky směrem zleva doprava).
END_PGML_HINT


########################
#  Solution

BEGIN_PGML_SOLUTION

* Prvek [`` a_{[$i1][$j1]}``] je v řádku číslo [$i1] (počítáno od jedničky směrem shora dolů) a sloupci číslo [$j1] (počítáno od jedničky směrem zleva doprava).
* Prvek [`` a_{[$i2][$i2]}``] je v řádku číslo [$i2] a sloupci číslo [$i2].
* Řešením je tedy [`` a_{[$i1][$j1]} = [$A->element($i1,$j1)]``] a [`` a_{[$i2][$i2]} = [$A->element($i2,$i2)]``].

END_PGML_SOLUTION

COMMENT('Uses PGML.');

ENDDOCUMENT();

