DOCUMENT();
loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGgraphmacros.pl",
  "contextLimitedVector.pl",
  "AnswerFormatHelp.pl",
  "PGML.pl",
  "unionTables.pl",
  "PGcourse.pl"
);
TEXT(beginproblem());
$refreshCachedImages = 1;
$showPartialCorrectAnswers = 1;
$showHint = 1;

Context("LimitedVector-coordinate")->variables->are(x=>'Real',y=>'Real');

$num_vects = 8;
foreach my $i (1..$num_vects) {
  Context()->strings->add( 'v'.$i =>{ TeX=> "\mathbf{v_{$i}}" });
}
Context()->flags->set(
    formatStudentAnswer=>'parsed',
    ijk=>0
);

# construct a color gradient
#
sub makegradient # ($graph, $steps, $r0, $g0, $b0, $r1, $g1, $b1)
{
  my ($graph, $steps, $r0, $g0, $b0, $r1, $g1, $b1) = @_;
  my $dr = ($r1 - $r0) / $steps;
  my $dg = ($g1 - $g0) / $steps;
  my $db = ($b1 - $b0) / $steps;

  my $r = $r0;
  my $g = $g0;
  my $b = $b0;
  for my $i (0..$steps-1)
  {
    $graph->new_color("gradient$i",$r,$g,$b);
    $r += $dr;
    $g += $dg;
    $b += $db;
  }
  return $graph;
}

# Construct graph canvases

$pixels = 401;
@gr = ();

($xmin,$xmax) = (-9,9);
($ymin,$ymax) = (-9,9);

foreach my $i (0..1) {

  $gr[$i] = init_graph($xmin,$ymin,$xmax,$ymax, axes=>[0,0], size=>[$pixels,$pixels]);
  $gr[$i] -> lb('reset');

  #  manually draw the grid
  foreach my $x ($xmin..$xmax) {
    $gr[$i] -> moveTo($x,$ymin);
    $gr[$i] -> lineTo($x,$ymax,'gray',1);
  }
  foreach my $y ($ymin..$ymax) {
    $gr[$i] -> moveTo($xmin,$y);
    $gr[$i] -> lineTo($xmax,$y,'gray',1);
  }

  #  axes labels
  $gr[$i] -> lb(new Label ( $xmax-0.5,0,'x','black','left','bottom'));
  $gr[$i] -> lb(new Label ( 0.25,$ymax-0.5,'y','black','left','bottom'));

  foreach my $x (($xmin+1)..-1,1..($xmax-1)) {
    $gr[$i] -> lb(new Label ( $x,$ymin+0.75, $x,'black','center','top'));
  }
  foreach my $y (($ymin+1)..-1,1..($ymax-1)) {
    $gr[$i] -> lb(new Label ($xmin+0.75, $y, $y,'black','right','middle'));
  }

  #  Add to $gr[$i] a $num_vects step color gradient
  $gr[$i] = &makegradient($gr[$i], $num_vects,
  0,0,225,    # RGB blue
  225,0,0     # RGB red
  );

} # end constructing graph canvases


################################
#  plot vectors in domain

$r = 3;
@theta = ();
@x1 = (); # domain of T
@y1 = (); # domain of T

foreach my $i (1..$num_vects) {
  $theta[$i] = 2*3.14159 * (($i-1) / $num_vects);
  $x1[$i] = $r * cos($theta[$i]); # domain
  $y1[$i] = $r * sin($theta[$i]); # domain

  $gr[0]->moveTo(0,0);
  my $j = $i - 1;
  $gr[0]->arrowTo($x1[$i], $y1[$i], "gradient".$j, 3);
  $gr[0]->lb(new Label (1.2*$x1[$i],1.2*$y1[$i], ' v'."$i".' ', 'gradient'.$j, 'center','middle'));
}

###############################
#  plot vectors in codomain

#  indices for e-vects in the first eigenspace
$i1 = random(1,2,1);
$i3 = ($num_vects/2) + $i1;

#  indices for e-vects in the second eigenspace
$i2 = $i1+2;
$i4 = ($num_vects/2) + $i2;

#  eigenvalues
$k1 = list_random(0.6,0.8,0.9); # for i1 and i3
$k2 = list_random(1.4, 1.5, 1.6, 1.8, 2, 2.2);

$prohodit=random(0,1,1);
if ($prohodit==0) {
$l=$k1;
$k1=$k2;
$k2=$l;
}

$ktery=random(0,1,1);
if ($ktery==0) {
    $vlastnost="menší";
    if ($k1<$k2)
    { $evects = List('v'.$i1, 'v'.$i3); }
    else 
    { $evects = List('v'.$i2, 'v'.$i4); }
}
else {
    $vlastnost="větší";
    if ($k1<$k2)
    { $evects = List('v'.$i2, 'v'.$i4); }
    else 
    { $evects = List('v'.$i1, 'v'.$i3); }
}
$allevects = List('v'.$i1, 'v'.$i2, 'v'.$i3, 'v'.$i4); 




$P = Matrix([
[$x1[$i1],$x1[$i2]],
[$y1[$i1],$y1[$i2]]
]);

$D = Matrix([
[$k1, 0],
[0, $k2]
]);

$A = $P * $D * ($P->inverse); # matrix for the linear transformation T

$a11 = $A->element(1,1); $a12 = $A->element(1,2);
$a21 = $A->element(2,1); $a22 = $A->element(2,2);

# Matice ma byt symetricka ale vlivem numerickcyh chyb neni
# Oprava, symetricnost zajistime "natvrdo"
$Around = Matrix([[int(1000*$a11+.5),int(1000*$a12+.5)],
[int(1000*$a12+.5),int(1000*$a22+.5)]])/1000;

@x2 = ();
@y2 = ();
@length2 = ();
foreach my $i (1..$num_vects) {
  $x2[$i] = $a11 * $x1[$i] + $a12 * $y1[$i];
  $y2[$i] = $a21 * $x1[$i] + $a22 * $y1[$i];
  $length2[$i] = Real( sqrt( ($x2[$i])**2 + ($y2[$i])**2 ) );

  $gr[1]->moveTo(0,0);
  my $j = $i - 1;
  $gr[1]->arrowTo($x2[$i], $y2[$i], "gradient".$j, 3);
  $gr[1]->lb(new Label (1.3*$x2[$i],1.2*$y2[$i], 'T(v'."$i".')', 'gradient'.$j, 'center','middle'));
}



#######################################
#  make figures

@fig = ();
$fig[0] = image(insertGraph($gr[0]), width=>$pixels, height=>$pixels, tex_size=>450);
$fig[1] = image(insertGraph($gr[1]), width=>$pixels, height=>$pixels, tex_size=>450);

#######################################

BEGIN_PGML

## Geometrický přístup k vlastním hodnotám

Pokud maticové násobení chápeme jako geometrickou transformaci, je vlastní vektor takový vektor, který se zobrazí na vektor rovnoběžný. Tj. obraz a vzor míří buď stejný směrem (pro kladná vlastní čísla) nebo opačným směrem (pro záporná vlastní čísla).

Materiál má zpravidla kladná vlastní čísla, protože materiálová odezva víceméně odpovídá podnětu. Vlastnosti materiálu mohou odezvu odklonit (například do směru, ve kterém materiál lépe vede vodu či teplo), ale už ne přímo obrátit. U anizotropního materiálu jsou vlastní čísla různá. Pokud porovnáváme obrazy stejně dlouhých vektorů, potom ve vlastním směru příslušném většímu vlastnímu číslu má obraz největší velikost, ve směru příslušném menšímu vlastnímu číslu nejmenší velikost a mezi tím jsou vektory, kde velikost je mezi minimální a maximální a směr poněkud odkloněný.

Mějme zobrazení [` T: \mathbb{R}^2 \to \mathbb{R}^2 `] definované dle obrázku (vlevo jsou vzory vektorů a vpravo obrazy).

[@
BeginTable().
  AlignedRow([ $fig[0],"\\( \\Large \\stackrel{T}{\\to} \\)", $fig[1] ]).
  TableSpace(5,0).
  AlignedRow([" vzory"," " ," obrazy"]).
EndTable().$PAR
@]***

Matice zobrazení je [`[$Around]`]. Všimněte si symetrie této matice. Díky tomu jsou vlastní směry navzájem kolmé. 
    
Z osmi vektorů na obrázku jsou čtyři vlastními vektory. Dva protilehlé přísluší větší a dva na ně kolmé menší vlastní hodnotě. Které vektory jsou vlastní vektory příslušné *[$vlastnost] vlastní hodnotě*? 

Vlastní vektory příslušné [$vlastnost] vlastní hodnotě jsou [______________________]{$evects}.

Vložte odpověď jako seznam oddělený čárkou. Na pořadí nezáleží. Jestli-li například přesvědčeni, že správnou odpovědí jsou vektory v1 a v2, napište buď *v1,v2* nebo *v2,v1*.

END_PGML

BEGIN_PGML_HINT
    Musíte zjistit, u kterých vektorů mají vzor i obraz stejný směr. Takové vektory jsou čtyří. Dva protilehlé se prodlužují a jiné dva protilehlé se zkracují. Podle toho vyberte správnou odpověď.
 
END_PGML_HINT

BEGIN_PGML_SOLUTION
    Musíte zjistit, u kterých vektorů mají vzor i obraz stejný směr. Takové vektory jsou čtyří: [$allevects]. Dva protilehlé se prodlužují a jiné dva protilehlé se zkracují. Podle toho vyberete správnou odpověď. V tomto případě to jsou [$evects].
 
END_PGML_SOLUTION
    
COMMENT('Distinct real eigenvalues.  Dilates in two different, arbitrarily chosen directions.');

ENDDOCUMENT();
