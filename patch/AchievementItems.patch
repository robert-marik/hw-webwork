diff --git a/lib/WeBWorK/AchievementItems.pm b/lib/WeBWorK/AchievementItems.pm
index 3b596aa3c..1a2b44e6c 100644
--- a/lib/WeBWorK/AchievementItems.pm
+++ b/lib/WeBWorK/AchievementItems.pm
@@ -245,7 +245,7 @@ sub use_item {
     my $userSet = $db->getUserSet($userName,$setID);
     
     #add time to the reduced scoring date, due date, and answer date; remove item from inventory
-    $userSet->reduced_scoring_date($set->reduced_scoring_date()+86400) if defined($set->reduced_scoring_date());
+    $userSet->reduced_scoring_date($set->reduced_scoring_date()+86400) if defined($set->reduced_scoring_date()) && length($set->reduced_scoring_date())>0;
     $userSet->due_date($set->due_date()+86400);
     $userSet->answer_date($set->answer_date()+86400);
 
@@ -329,7 +329,7 @@ sub use_item {
     my $userSet = $db->getUserSet($userName,$setID);
     
     #add time to the reduced scoring date, due date, and answer date; remove item from inventory
-    $userSet->reduced_scoring_date($set->reduced_scoring_date()+172800) if defined($set->reduced_scoring_date());
+    $userSet->reduced_scoring_date($set->reduced_scoring_date()+172800) if defined($set->reduced_scoring_date()) && length($set->reduced_scoring_date())>0;
     $userSet->due_date($set->due_date()+172800);
     $userSet->answer_date($set->answer_date()+172800);
 
@@ -671,7 +671,7 @@ sub print_form {
     #problems in each set
 
     for (my $i=0; $i<=$#$sets; $i++) {
-	if (between($$sets[$i]->open_date, $$sets[$i]->due_date) && $$sets[$i]->assignment_type eq "default") {
+	if (after($$sets[$i]->open_date) && $$sets[$i]->assignment_type eq "default") {
 	    push(@openSets,$$sets[$i]->set_id);
 	    push(@openSetCount,$$setProblemCount[$i]);
 	    $maxProblems = $$setProblemCount[$i] if ($$setProblemCount[$i]>$maxProblems);
@@ -784,7 +784,7 @@ sub print_form {
     # of items in second drop down
 
     for (my $i=0; $i<=$#$sets; $i++) {
-	if (between($$sets[$i]->open_date, $$sets[$i]->due_date) && $$sets[$i]->assignment_type eq "default") {
+	if (after($$sets[$i]->open_date) && $$sets[$i]->assignment_type eq "default") {
 	    push(@openSets,$$sets[$i]->set_id);
 	    push(@openSetCount,$$setProblemCount[$i]);
 	    $maxProblems = $$setProblemCount[$i] if ($$setProblemCount[$i]>$maxProblems);
@@ -865,6 +865,7 @@ sub use_item {
     return;
 }
 
+
 #Item to give half credit on all problems in a homework set.
 package WeBWorK::AchievementItems::HalfCreditSet;
 our @ISA = qw(WeBWorK::AchievementItems);
@@ -903,7 +904,7 @@ sub print_form {
     
     #print form with sets 
     return join("",
-		CGI::p($r->maketext("Choose the set which you would like to resurrect.")),
+		CGI::p($r->maketext("Choose the set which you would like to enhance.")),
 		CGI::label($r->maketext("Set Name "),
 		CGI::popup_menu({values=>\@openSets,id=>"hcs_set_id", name=>"hcs_set_id"})));
 }
@@ -955,6 +956,96 @@ sub use_item {
     return;
 }
 
+#Item to give quarter credit on all problems in a homework set.
+package WeBWorK::AchievementItems::DuplicateProb;
+our @ISA = qw(WeBWorK::AchievementItems);
+
+use WeBWorK::Utils qw(sortByName before after between x nfreeze_base64 thaw_base64);
+
+sub new {
+    my $class = shift;
+    my %options = @_;
+
+    my $self = {
+	id => "DuplicateProb",
+	name => x("Quarter Tome of Enlightenment"),
+	description => x("Gives quarter credit on every problem in a set."),
+	%options,
+    };
+    
+    bless($self, $class);
+    return $self;
+}
+    
+sub print_form {
+    my $self = shift;
+    my $sets = shift;
+    my $setProblemCount = shift;
+    my $r = shift;
+    
+    my @openSets;
+    my @openSetCount;
+    my $maxProblems=0;
+
+    for (my $i=0; $i<=$#$sets; $i++) {
+	push(@openSets,$$sets[$i]->set_id);
+    }
+    
+    
+    #print form with sets 
+    return join("",
+		CGI::p($r->maketext("Choose the set which you would like to enhance.")),
+		CGI::label($r->maketext("Set Name "),
+		CGI::popup_menu({values=>\@openSets,id=>"hcs_set_id", name=>"hcs_set_id"})));
+}
+
+sub use_item {
+    my $self = shift;
+    my $userName = shift;
+    my $r = shift;
+    my $db = $r->db;
+    my $ce = $r->ce;
+
+    #validate data
+
+    my $globalUserAchievement = $db->getGlobalUserAchievement($userName);
+    return "No achievement data?!?!?!" 
+	unless ($globalUserAchievement->frozen_hash);
+    my $globalData = thaw_base64($globalUserAchievement->frozen_hash);
+
+    return "You are $self->{id} trying to use an item you don't have" unless
+	($globalData->{$self->{id}});
+
+    my $setID = $r->param('hcs_set_id');
+    return "You need to input a Set Name" unless
+	(defined $setID);
+
+    # go through the problems in the set
+    my @probIDs = $db->listUserProblems($userName,$setID);
+
+    foreach my $probID (@probIDs) {
+	my $problem = $db->getUserProblem($userName, $setID, $probID);
+	
+	return "There was an error accessing that problem." unless $problem;
+
+	#Add .5 to grade with max of 1
+	
+	if ($problem->status < .75) {
+	    $problem->status($problem->status + .25); 
+	} else {
+	    $problem->status(1);
+	}
+	
+	$db->putUserProblem($problem);
+    }
+    
+    $globalData->{$self->{id}} = 0;
+    $globalUserAchievement->frozen_hash(nfreeze_base64($globalData));
+    $db->putGlobalUserAchievement($globalUserAchievement);
+
+    return;
+}
+
 #Item to give full credit on a single problem
 package WeBWorK::AchievementItems::FullCreditProb;
 our @ISA = qw(WeBWorK::AchievementItems);
@@ -989,7 +1080,7 @@ sub print_form {
     #print form getting set and problem number
 
     for (my $i=0; $i<=$#$sets; $i++) {
-	if (between($$sets[$i]->open_date, $$sets[$i]->due_date) && $$sets[$i]->assignment_type eq "default") {
+	if (after($$sets[$i]->open_date) && $$sets[$i]->assignment_type eq "default") {
 	    push(@openSets,$$sets[$i]->set_id);
 	    push(@openSetCount,$$setProblemCount[$i]);
 	    $maxProblems = $$setProblemCount[$i] if ($$setProblemCount[$i]>$maxProblems);
@@ -1152,7 +1243,7 @@ sub use_item {
 }
 
 #Item to turn one problem into another problem
-package WeBWorK::AchievementItems::DuplicateProb;
+package WeBWorK::AchievementItems::DuplicateProbRemoved;
 our @ISA = qw(WeBWorK::AchievementItems);
 
 use WeBWorK::Utils qw(sortByName before after between x nfreeze_base64 thaw_base64);
