##################################
#  Initialization

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "PGmatrixmacros.pl",
  "MathObjects.pl",
  "PGcourse.pl",
  "PGML.pl"
);


TEXT(beginproblem());


$showHint = 1;

#####################################
#  Setup



Context("Vector");

# Construct matrix A with known eigenvector [v11 v12] eigenval l1

$a = non_zero_random(-5,5,1);
$c = random(1,3,1);
do { $b = non_zero_random(-5,5,1); } until (($b*$c != $a) and (abs($b*$c) < 10));

$neg = non_zero_random(-1,1,1);

$min = max(-9,-9-$a,-9-$b*$c);  $max = min(9,9-$a,9-$b*$c);
do { $phase = non_zero_random($min,$max,1); } until ((abs($a+$b*$c+$phase) < 12) and ($a!= -$phase) and ($b*$c != -$phase));


$A11 =  $phase;  $A12 =  -$neg*$a*$c;
$A21 = $neg*$b;  $A22 =  $a+$b*$c+$phase;

$l1= Real("$b*$c+$phase");
$v11 = Real("$a");
$v12 = Real("-$neg*$b");

$scale = 1;
$v11 = $scale*$v11;
$v12 = $scale*$v12;
$v1 = ColumnVector([$v11,$v12]);


# Construct matrix B with known eigenvector [v21 v22] eigenval l2

$a = non_zero_random(-5,5,1);
$c = random(1,3,1);
do { $b = non_zero_random(-5,5,1); } until (($b*$c != $a) and (abs($b*$c) < 10));

$neg = non_zero_random(-1,1,1);

$min = max(-9,-9-$a,-9-$b*$c);  $max = min(9,9-$a,9-$b*$c);
do { $phase = non_zero_random($min,$max,1); } until ((abs($a+$b*$c+$phase) < 12) and ($a!= -$phase) and ($b*$c != -$phase));


$B11 =  $phase;  $B12 =  -$neg*$a*$c;
$B21 = $neg*$b;  $B22 =  $a+$b*$c+$phase;

$l2 = Real("$b*$c+$phase");
$v21 = Real("$a");
$v22 = Real("-$neg*$b");



$v2 = ColumnVector([$v21,$v22]);

## Ulozeni do matic

Context("Matrix");

#Context()->lists->set(Matrix => {open => "(", close => ")"});
#Context()->lists->set(Vector => {open => "(", close => ")"});


$A=Matrix([[$A11,$A12],[$A21,$A22]]);
$B=Matrix([[$B11,$B12],[$B21,$B22]]);
$BI=Matrix([[$B11-$l2,$B12],[$B21,$B22-$l2]]);


#####################################
#  Main text

Context()->texStrings;

BEGIN_PGML

# Vlastní vektor matice ze známého vlastního čísla a naopak

Vlastní vektor se pomocí matice zobrazuje na svůj násobek. Například matice [``A=\begin{pmatrix}3&-2\\1&0\end{pmatrix}``] zobrazuje vektor
[``\vec v=\begin{pmatrix}2\\1\end{pmatrix}``] na vektor [``\begin{pmatrix}4\\2\end{pmatrix}``], tj. na dvojnásobek původního vektoru. Proto je vektor [`\vec v`] vlastním vektorem příslušným vlastnímu číslu [`2`].

Pokud chceme ze známého vlastního čísla [`\lambda`] určit vlastní vektor matice [`A`], musíme vyřešit soustavu rovnic
[``` (A-\lambda I)\vec v = 0```] a najít její libovolné nenulové řešení. Zde [`I`] je jednotková matice. V případě naší matice a vlastního čísla [`2`] dostaneme
v souřadnicích
soustavu
[``` \begin{pmatrix}3-2&-2\\1&0-2\end{pmatrix} \begin{pmatrix} v_1\\v_2\end{pmatrix}= \begin{pmatrix}1&-2\\1&-2\end{pmatrix} \begin{pmatrix} v_1\\v_2\end{pmatrix}=\begin{pmatrix}0\\0\end{pmatrix}.```]
Protože jsme použili hodnotu [`\lambda`] rovnu vlastnímu číslu, má tato soustava nenulové řešení a ve dvourozměrném případě to znamená, že obě rovnice jsou stejné, nebo je jedna násobkem druhé. V našem případě [``` v_1-2v_2=0.```] Je proto snadné najít nějaké nenulové řešení, stačí zvolit libovolnou nenulovou jednu souřadnici vektoru [`\vec v`] a dopočítat druhou. Například pro [`v_2=1`] dostáváme [`v_1=2`] a vlastním vektorem je například vektor [``\vec v=\begin{pmatrix}2\\1\end{pmatrix}``].


------

Matice [``A=[$B]``] má vlastní hodnotu [`\lambda=[$l2]`]. Najděte vlastní vektor [`\vec v`] příslušný této vlastní hodnotě.
>> [``\vec v=``][_________]*{$v2->cmp(parallel=>true)}<<

_Návod: Vektor zapište buď jako lineární kombinaci jednotkových vektorů [`\vec i`] a [`\vec j`], nebo pomocí souřadnic oddělených čárkami a pomocí ostrých závorek < a > ohraničujících začátek a konec vektoru, tj. pomocí znaků používaných například pro nerovnice. Například vektor [`\begin{pmatrix}3\\-1\end{pmatrix}`] zapíšete  buď jako *3i-j* nebo jako *< 3 , -1 >*._

------------------

Následující příklad bystě měli být schopni vypočítat jenom pomocí vhodného maticového součinu a bez hledání všech vlastních hodnot.

Matice [``B=[$A]``] má vlastní vektor [`\vec v=[$v1]`]. Najděte příslušnou vlastní hodnotu [`\lambda`] této matice.

>>[`\lambda=`][__________]{$l1}<<


END_PGML
Context()->normalStrings;

#####################################
#  Answer evaluation

BEGIN_PGML_HINT
Pro první příklad musíte vyřešit soustavu lineárních rovnic. Sledujte řešený příklad a případně další příklady ze cvičení čí přednášky.

Ve druhém případě stačí vynásobit matici s vektorem a podívat se, na jaký násobek se vektor transformuje. Pokud máte potíže s násobením a chcete si správnost zkontrolovat, použijte MATLAB, Octave nebo Sage.
END_PGML_HINT


$showPartialCorrectAnswers = 1;

BEGIN_PGML_SOLUTION
Protože vlastní číslo je [`\lambda=[$l2]`], najdeme vlastní vektor jako řešení soustavy
[```0=(A-\lambda I)\vec v=\left([$B]-([$l2])I\right)\vec v=[$BI]\vec v.```]
Tato soustava představuje dvakrát zopakovanou stejnou rovnici (až na případný násobek) a stačí se dívat na první nebo druhou rovnici najít libovolný nenulový vektor, který je řešením. Například vektor [`[$v2]`].

Pro druhou část stačí ukázat, že po vynásobení matice [`B`] a vektoru [`\vec v`], tj. po výpočtu
[``` [$A][$v1]=[$A*$v1],```]
vyjde součin jako [`[$l1]`]-násobek vektoru [`[$v1]`]. To znamená, že vlastní hodnota (vlastní číslo) je [`\lambda=[$l1]`].
END_PGML_SOLUTION

COMMENT('Eigenvalues and eigenvectors between -4 and 4.');

ENDDOCUMENT(); 
