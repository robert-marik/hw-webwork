DOCUMENT();        # This should be the first executable line in the problem.
loadMacros(
  "PGstandard.pl",
  "PGchoicemacros.pl",
  "MathObjects.pl",
  "PGML.pl",
  "PGcourse.pl"
);
 
TEXT(beginproblem());    
# Do not show which answers are incorrect.
$showPartialCorrectAnswers = 0;

# FIRST MATRIX
do{
    $a=non_zero_random(-1,1,2);
    $b=random(-3,3,1);
    $c=random(-3,3,1);
    $d=(random(-1,1,2)+($b)*($c)) * ($a);
    $matice=Matrix([[$a,$b],[$c,$d]]);
    $v1=Matrix([[non_zero_random(-1,1)],0]);
    $invmatice=$matice->inverse;
    $matice=$invmatice*Matrix([[2,0],[0,non_zero_random(-1,1)]])*$matice;
    $ans=$invmatice*$v1;
}
until (max(abs($matice->element(1,1)),abs($matice->element(1,2)),abs($matice->element(2,1)),abs($matice->element(2,1)),abs($ans->element(1,1)),abs($ans->element(2,1)))<10);
$matice1=$matice;
$ans1=$ans;

# SECOND MATRIX
do{
    $a=non_zero_random(-1,1,2);
    $b=random(-3,3,1);
    $c=random(-3,3,1);
    $d=(random(-1,1,2)+($b)*($c)) * ($a);
    $matice=Matrix([[$a,$b],[$c,$d]]);
    $v1=Matrix([[non_zero_random(-1,1)],0]);
    $invmatice=$matice->inverse;
    $matice=$invmatice*Matrix([[2,0],[non_zero_random(-1,1),non_zero_random(-1,1)]])*$matice;
    $ans=$invmatice*$v1;
}
until (max(abs($matice->element(1,1)),abs($matice->element(1,2)),abs($matice->element(2,1)),abs($matice->element(2,1)),abs($ans->element(1,1)),abs($ans->element(2,1)))<10);
$matice2=$matice;
$ans2=$ans;


# THIRD MATRIX
do{
    $a=non_zero_random(-1,1,2);
    $b=random(-3,3,1);
    $c=random(-3,3,1);
    $d=(random(-1,1,2)+($b)*($c)) * ($a);
    $matice=Matrix([[$a,$b],[$c,$d]]);
    $v1=Matrix([[non_zero_random(-1,1)],0]);
    $invmatice=$matice->inverse;
    $matice=$invmatice*Matrix([[2,0],[0,non_zero_random(-1,1)]])*$matice;
    $ans=$invmatice*$v1;
}
until (max(abs($matice->element(1,1)),abs($matice->element(1,2)),abs($matice->element(2,1)),abs($matice->element(2,1)),abs($ans->element(1,1)),abs($ans->element(2,1)))<10);
$matice3=$matice;
$ans3=$ans;


# FOURTH MATRIX
do{
    $a=non_zero_random(-1,1,2);
    $b=random(-3,3,1);
    $c=random(-3,3,1);
    $d=(random(-1,1,2)+($b)*($c)) * ($a);
    $matice=Matrix([[$a,$b],[$c,$d]]);
    $v1=Matrix([[non_zero_random(-1,1)],0]);
    $invmatice=$matice->inverse;
    $matice=$invmatice*Matrix([[2,0],[non_zero_random(-1,1),non_zero_random(-1,1)]])*$matice;
    $ans=$invmatice*$v1;
}
until (max(abs($matice->element(1,1)),abs($matice->element(1,2)),abs($matice->element(2,1)),abs($matice->element(2,1)),abs($ans->element(1,1)),abs($ans->element(2,1)))<10);
$matice4=$matice;
$ans4=$ans;


# Make a new checkbox multiple choice
$tf = new_pop_up_select_list();
$tf->ra_pop_up_list(["?"=>"Vyberte odpoved", "Ano" => "Ano", "Ne" => "Ne"]);
# $cmc now "contains" the checkbox multiple choice object.

# Insert some  questions and matching answers in the q/a list

Context()->texStrings;

$tf -> qa ( 
"\( A=$matice1 \) a \( v=$ans1 \)", 
"Ano",
"\( A=$matice2 \) a \( v=$ans2 \)", 
"Ne",
"\( A=$matice3 \) a \( v=$ans3 \)", 
"Ano",
"\( A=$matice4 \) a \( v=$ans4 \)", 
"Ne",            
);

$tf->choose(3);

# Insert some incorrect answers

# Print the text using $mc->print_q for the questions and
# $mc->print_a to print the answers.
BEGIN_PGML

Určete, zda je vektor [`v`] vlastním vektorem matice [`A`].

[@ $tf -> print_q @]*

END_PGML

Context()->normalStrings;

BEGIN_PGML_SOLUTION
Násobíme matici s vektorem a díváme se, jestli je výsledek násobkem původního vektoru. Pokud ano, je tento vektor vlastním vektorem.
END_PGML_SOLUTION

# Enter the correct answers to be checked against the answers to the students.
ANS(str_cmp( $tf->ra_correct_ans )   ) ;

ENDDOCUMENT();
